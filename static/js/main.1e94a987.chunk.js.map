{"version":3,"sources":["visualizer/conway.js","App.js","serviceWorker.js","index.js"],"names":["generation","operations","generateEmptyGrid","rows","i","push","Array","from","ConwaysVisualizer","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","console","log","setTimeout","onClick","Math","random","generateRandomGrid","style","justifyContent","display","gridTemplateColumns","map","col","key","onMouseDown","newGrid","width","height","backgroundColor","undefined","border","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e94a987.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\r\nimport produce from \"immer\";\r\nconst numRows = 30;\r\nconst numCols = 30;\r\n\r\nvar generation = 0;\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0]\r\n];\r\n\r\n\r\nconst generateEmptyGrid = () => {\r\n  const rows = []\r\n  for (let i = 0; i < numRows; i++) {\r\n    rows.push(Array.from(Array(numCols), () => 0))\r\n  }\r\n  generation = 0;\r\n  return rows;\r\n}\r\n\r\nconst generateRandomGrid = () => {\r\n  const rows = [];\r\n  for (let i = 0; i < numRows; i++) {\r\n    rows.push(\r\n      Array.from(Array(numCols), () => (Math.random() > 0.6 ? 1 : 0))\r\n    );\r\n  }\r\n  generation = 0;\r\n  return rows;\r\n}\r\n\r\nconst ConwaysVisualizer = () => {\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid();\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      generation=0;\r\n      return;\r\n    }\r\n\r\n    setGrid(g => {\r\n      return produce(g, gridCopy => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let j = 0; j < numCols; j++) {\r\n            let neighbors = 0;\r\n            operations.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newJ = j + y;\r\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\r\n                neighbors += g[newI][newJ];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][j] = 0;\r\n            } else if (g[i][j] === 0 && neighbors === 3) {\r\n              gridCopy[i][j] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n    generation += 1;\r\n    console.log(\"gen\", generation);\r\n    setTimeout(runSimulation, 100);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <button\r\n        onClick={() => {\r\n          setRunning(!running);\r\n          if (!running) {\r\n            runningRef.current = true;\r\n            runSimulation()\r\n          }\r\n        }}>\r\n        {running ? 'Stop' : \"Start\"}\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          setGrid(generateEmptyGrid())\r\n        }}>\r\n        Clear Grid\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          setGrid(generateRandomGrid())\r\n        }}>\r\n        Randomize Grid\r\n      </button>\r\n      \r\n      <div>\r\n        Generation:  {generation}\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          justifyContent: \"center\",\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\r\n        }}\r\n      >\r\n        {grid.map((rows, i) => rows.map((col, j) => (\r\n          <div\r\n            key={'${i}-${j}'}\r\n            onMouseDown={() => {\r\n              const newGrid = produce(grid, gridCopy => {\r\n                gridCopy[i][j] = grid[i][j] ? 0 : 1;\r\n              });\r\n              setGrid(newGrid);\r\n            }}\r\n            style={{\r\n              width: 20,\r\n              height: 20,\r\n              backgroundColor: grid[i][j] ? \"dodgerBlue\" : undefined,\r\n              border: \"solid 1px black\",\r\n            }}\r\n          />\r\n        ))\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConwaysVisualizer;\r\n","import React from 'react';\r\nimport ConwaysVisualizer from './visualizer/conway'\r\n\r\nconst App = () => {\r\n  return (\r\n   <ConwaysVisualizer/>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}